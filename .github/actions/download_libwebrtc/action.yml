name: 'Download libWebRTC'
description: 'Download libWebRTC'
inputs:
  access_token:
    description: 'GH App Installation access token'
    required: true
  release_tag:
    description: 'LibWebRTC release tag.'
    required: true
  asset_pattern:
    description: 'Find release asset by defined pattern.'
    required: true
    default: "^.*"
runs:
  using: "composite"
  steps:
    - run: |
        echo "Looking for libwebrtc using the pattern: ${LIBWEBRTC_ASSETS_PATTERN}"
        echo "LibWebRTC release tag: ${LIBWEBRTC_RELEASE_TAG}"
        export LIBWEBRTC_RELEASE_URL=$(curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${GH_ACCESS_TOKEN_1H_EXPIRATION}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/CoSMoSoftware/libwebrtc-cmake/releases/tags/${LIBWEBRTC_RELEASE_TAG} | jq .url | tr -d '"')
        echo "LIBWEBRTC_RELEASE_URL: ${LIBWEBRTC_RELEASE_URL}"
        curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${GH_ACCESS_TOKEN_1H_EXPIRATION}" -H "X-GitHub-Api-Version: 2022-11-28" ${LIBWEBRTC_RELEASE_URL}/assets > assets.json
        for asset_pair in $(cat assets.json | jq '.[] | (.id|tostring) + "|" + .name' | tr -d '"')
        do
          asset_pair=( ${asset_pair//|/ } )
          if [[ $(echo ${asset_pair[1]} | grep -e ${LIBWEBRTC_ASSETS_PATTERN}) ]]; then
            echo "Downloading ${asset_pair[1]} from GitHub - GH_ASSET_ID: ${asset_pair[0]}..."
            curl -L -H "Accept: application/octet-stream" -H "Authorization: Bearer ${GH_ACCESS_TOKEN_1H_EXPIRATION}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/CoSMoSoftware/libwebrtc-cmake/releases/assets/${asset_pair[0]} > ${asset_pair[1]}
          fi
        done
        rm assets.json
        ls -la
      env:
        GH_ACCESS_TOKEN_1H_EXPIRATION: ${{ inputs.access_token }}
        LIBWEBRTC_RELEASE_TAG: ${{ inputs.release_tag }}
        LIBWEBRTC_ASSETS_PATTERN: ${{ inputs.asset_pattern }}
      shell: bash
