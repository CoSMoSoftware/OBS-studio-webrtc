/* -LICENSE-START-
** Copyright (c) 2011 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/
/* DeckLinkAPI_v8_1.idl */

/* Enum BMDDeckControlVTRControlState_v8_1 - VTR Control state */

typedef [v1_enum] enum  _BMDDeckControlVTRControlState_v8_1 {
    bmdDeckControlNotInVTRControlMode_v8_1                            = /* 'nvcm' */ 0x6E76636D,
    bmdDeckControlVTRControlPlaying_v8_1                              = /* 'vtrp' */ 0x76747270,
    bmdDeckControlVTRControlRecording_v8_1                            = /* 'vtrr' */ 0x76747272,
    bmdDeckControlVTRControlStill_v8_1                                = /* 'vtra' */ 0x76747261,
    bmdDeckControlVTRControlSeeking_v8_1                              = /* 'vtrs' */ 0x76747273,
    bmdDeckControlVTRControlStopped_v8_1                              = /* 'vtro' */ 0x7674726F
} BMDDeckControlVTRControlState_v8_1;


interface IDeckLinkDeckControlStatusCallback;
interface IDeckLinkDeckControl;

/* Interface IDeckLinkDeckControlStatusCallback_v8_1 - Deck control state change callback. */

[
    object,
    uuid(E5F693C1-4283-4716-B18F-C1431521955B),
    helpstring("Deck control state change callback.")
] interface IDeckLinkDeckControlStatusCallback_v8_1 : IUnknown
{
    HRESULT TimecodeUpdate([in] BMDTimecodeBCD currentTimecode);
    HRESULT VTRControlStateChanged([in] BMDDeckControlVTRControlState_v8_1 newState, [in] BMDDeckControlError error);
    HRESULT DeckControlEventReceived([in] BMDDeckControlEvent event, [in] BMDDeckControlError error);
    HRESULT DeckControlStatusChanged([in] BMDDeckControlStatusFlags flags, [in] unsigned int mask);
};

/* Interface IDeckLinkDeckControl - Deck Control main interface */

[
    object,
    uuid(522A9E39-0F3C-4742-94EE-D80DE335DA1D),
    helpstring("Deck Control main interface")
] interface IDeckLinkDeckControl_v8_1 : IUnknown
{
    HRESULT Open([in] BMDTimeScale timeScale, [in] BMDTimeValue timeValue, [in] BOOL timecodeIsDropFrame, [out] BMDDeckControlError *error);
    HRESULT Close([in] BOOL standbyOn);
    HRESULT GetCurrentState([out] BMDDeckControlMode *mode, [out] BMDDeckControlVTRControlState_v8_1 *vtrControlState, [out] BMDDeckControlStatusFlags *flags);
    HRESULT SetStandby([in] BOOL standbyOn);
    HRESULT SendCommand([in] unsigned char *inBuffer, [in] unsigned int inBufferSize, [out] unsigned char *outBuffer, [out] unsigned int *outDataSize, [in] unsigned int outBufferSize, [out] BMDDeckControlError *error);
    HRESULT Play([out] BMDDeckControlError *error);
    HRESULT Stop([out] BMDDeckControlError *error);
    HRESULT TogglePlayStop([out] BMDDeckControlError *error);
    HRESULT Eject([out] BMDDeckControlError *error);
    HRESULT GoToTimecode([in] BMDTimecodeBCD timecode, [out] BMDDeckControlError *error);
    HRESULT FastForward([in] BOOL viewTape, [out] BMDDeckControlError *error);
    HRESULT Rewind([in] BOOL viewTape, [out] BMDDeckControlError *error);
    HRESULT StepForward([out] BMDDeckControlError *error);
    HRESULT StepBack([out] BMDDeckControlError *error);
    HRESULT Jog([in] double rate, [out] BMDDeckControlError *error);
    HRESULT Shuttle([in] double rate, [out] BMDDeckControlError *error);
    HRESULT GetTimecodeString([out] BSTR *currentTimeCode, [out] BMDDeckControlError *error);
    HRESULT GetTimecode([out] IDeckLinkTimecode **currentTimecode, [out] BMDDeckControlError *error);
    HRESULT GetTimecodeBCD([out] BMDTimecodeBCD *currentTimecode, [out] BMDDeckControlError *error);
    HRESULT SetPreroll([in] unsigned int prerollSeconds);
    HRESULT GetPreroll([out] unsigned int *prerollSeconds);
    HRESULT SetExportOffset([in] int exportOffsetFields);
    HRESULT GetExportOffset([out] int *exportOffsetFields);
    HRESULT GetManualExportOffset([out] int *deckManualExportOffsetFields);
    HRESULT SetCaptureOffset([in] int captureOffsetFields);
    HRESULT GetCaptureOffset([out] int *captureOffsetFields);
    HRESULT StartExport([in] BMDTimecodeBCD inTimecode, [in] BMDTimecodeBCD outTimecode, [in] BMDDeckControlExportModeOpsFlags exportModeOps, [out] BMDDeckControlError *error);
    HRESULT StartCapture([in] BOOL useVITC, [in] BMDTimecodeBCD inTimecode, [in] BMDTimecodeBCD outTimecode, [out] BMDDeckControlError *error);
    HRESULT GetDeviceID([out] unsigned short *deviceId, [out] BMDDeckControlError *error);
    HRESULT Abort(void);
    HRESULT CrashRecordStart([out] BMDDeckControlError *error);
    HRESULT CrashRecordStop([out] BMDDeckControlError *error);
    HRESULT SetCallback([in] IDeckLinkDeckControlStatusCallback_v8_1 *callback);
};


