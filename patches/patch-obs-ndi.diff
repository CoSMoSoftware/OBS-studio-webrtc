diff --git a/plugins/obs-ndi/CMakeLists.txt b/plugins/obs-ndi/CMakeLists.txt
index 7123df8..75d85e4 100644
--- a/plugins/obs-ndi/CMakeLists.txt
+++ b/plugins/obs-ndi/CMakeLists.txt
@@ -1,16 +1,20 @@
 cmake_minimum_required(VERSION 3.16...3.21)
 
 project(obs-ndi VERSION 4.11.1)
-add_library(${CMAKE_PROJECT_NAME} MODULE)
+add_library(${PROJECT_NAME} MODULE)
 
 set(PLUGIN_AUTHOR "Stephane Lepin")
-set(MACOS_BUNDLEID "fr.palakis.${CMAKE_PROJECT_NAME}")
+set(MACOS_BUNDLEID "fr.palakis.${PROJECT_NAME}")
 set(LINUX_MAINTAINER_EMAIL "stephane.lepin@gmail.com")
 
+if(UNIX AND NOT APPLE)
+  set(OS_LINUX TRUE)
+endif()
+
 # Add your custom source files here - header files are optional and only required for visibility
 # e.g. in Xcode or Visual Studio
 target_sources(
-  ${CMAKE_PROJECT_NAME}
+  ${PROJECT_NAME}
   PRIVATE src/obs-ndi.cpp
           src/obs-ndi.cpp
           src/obs-ndi-source.cpp
@@ -27,34 +31,55 @@ target_sources(
           src/Config.h
           src/forms/output-settings.h)
 
-target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/lib/ndi)
+# target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/lib/ndi)
+if(OS_LINUX AND NOT BUILD_NDI)
+  target_include_directories(${PROJECT_NAME}
+                            PRIVATE ${CMAKE_SOURCE_DIR}/lib/ndi)
+else()
+  target_include_directories(${PROJECT_NAME}
+                            PRIVATE ${CMAKE_SOURCE_DIR}/plugins/obs-ndi/lib/ndi
+                                    ${CMAKE_SOURCE_DIR}/UI/obs-frontend-api)
+endif()
 
 # Import libobs as main plugin dependency
-find_package(libobs REQUIRED)
-include(cmake/ObsPluginHelpers.cmake)
+if(OS_LINUX AND NOT BUILD_NDI)
+  # Build obs-ndi plugin separately from OBS
+  list(APPEND CMAKE_PREFIX_PATH "${CMAKE_SOURCE_DIR}/../../install/lib/cmake/libobs")
+  find_package(libobs REQUIRED)
+  include(cmake/ObsPluginHelpers.cmake)
+endif()
 
+if(OS_LINUX AND NOT BUILD_NDI)
+  list(APPEND CMAKE_PREFIX_PATH "${CMAKE_SOURCE_DIR}/../../install/lib/cmake/obs-frontend-api")
+else()
+  list(APPEND CMAKE_PREFIX_PATH "${CMAKE_BINARY_DIR}/UI/obs-frontend-api")
+endif()
 find_package(obs-frontend-api REQUIRED)
-target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE OBS::obs-frontend-api)
+target_link_libraries(${PROJECT_NAME} PRIVATE OBS::obs-frontend-api)
 
 find_qt(COMPONENTS Widgets Core)
-target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE Qt::Core Qt::Widgets)
+target_link_libraries(${PROJECT_NAME} PRIVATE Qt::Core Qt::Widgets)
 set_target_properties(
-  ${CMAKE_PROJECT_NAME}
+  ${PROJECT_NAME}
   PROPERTIES AUTOMOC ON
              AUTOUIC ON
              AUTORCC ON)
 
-configure_file(src/plugin-macros.h.in ${CMAKE_SOURCE_DIR}/src/plugin-macros.generated.h)
+if(OS_LINUX AND NOT BUILD_NDI)
+  configure_file(src/plugin-macros.h.in ${CMAKE_SOURCE_DIR}/src/plugin-macros.generated.h)
+else()
+  configure_file(src/plugin-macros.h.in ${CMAKE_SOURCE_DIR}/plugins/obs-ndi/src/plugin-macros.generated.h)
+endif()
 
-target_sources(${CMAKE_PROJECT_NAME} PRIVATE src/plugin-macros.generated.h)
+target_sources(${PROJECT_NAME} PRIVATE src/plugin-macros.generated.h)
 
 # /!\ TAKE NOTE: No need to edit things past this point /!\
 
 # --- Platform-independent build settings ---
 
-target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/src)
+target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/src)
 
-target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE OBS::libobs)
+target_link_libraries(${PROJECT_NAME} PRIVATE OBS::libobs)
 
 # --- End of section ---
 
@@ -63,11 +88,11 @@ if(OS_WINDOWS)
   configure_file(cmake/bundle/windows/installer-Windows.iss.in
                  ${CMAKE_BINARY_DIR}/installer-Windows.generated.iss)
 
-  configure_file(cmake/bundle/windows/resource.rc.in ${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}.rc)
-  target_sources(${CMAKE_PROJECT_NAME} PRIVATE ${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}.rc)
+  configure_file(cmake/bundle/windows/resource.rc.in ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.rc)
+  target_sources(${PROJECT_NAME} PRIVATE ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.rc)
 
   if(MSVC)
-    target_compile_options(${CMAKE_PROJECT_NAME} PRIVATE /W4)
+    target_compile_options(${PROJECT_NAME} PRIVATE /W4)
   endif()
   # --- End of section ---
 
@@ -80,13 +105,20 @@ elseif(OS_MACOS)
   set(MACOSX_PLUGIN_BUNDLE_VERSION "${CMAKE_PROJECT_VERSION}")
   set(MACOSX_PLUGIN_SHORT_VERSION_STRING "1")
 
-  target_compile_options(${CMAKE_PROJECT_NAME} PRIVATE -Wall)
+  target_compile_options(${PROJECT_NAME} PRIVATE -Wall)
   # --- End of section ---
 
   # --- Linux-specific build settings and tasks ---
 else()
-  target_compile_options(${CMAKE_PROJECT_NAME} PRIVATE -Wall)
+  target_compile_options(${PROJECT_NAME} PRIVATE -Wall)
 endif()
 # --- End of section ---
 
-setup_plugin_target(${CMAKE_PROJECT_NAME})
+if(NOT OS_LINUX)
+  string(REPLACE "-" "_" project_name_without_dash "${PROJECT_NAME}")
+  cpack_add_component_group(${project_name_without_dash}_group
+                            DISPLAY_NAME "obs-ndi plugin"
+                            DESCRIPTION "Network A/V in OBS Studio with NewTek's NDI technology")
+endif()
+
+setup_plugin_target(${PROJECT_NAME})
diff --git a/plugins/obs-ndi/cmake/ObsPluginHelpers.cmake b/plugins/obs-ndi/cmake/ObsPluginHelpers.cmake
index 450c46d..0745c57 100644
--- a/plugins/obs-ndi/cmake/ObsPluginHelpers.cmake
+++ b/plugins/obs-ndi/cmake/ObsPluginHelpers.cmake
@@ -501,11 +501,11 @@ else()
       set(CPACK_PACKAGE_NAME "${CMAKE_PROJECT_NAME}")
       set(CPACK_DEBIAN_PACKAGE_MAINTAINER "${LINUX_MAINTAINER_EMAIL}")
       set(CPACK_PACKAGE_VERSION "${CMAKE_PROJECT_VERSION}")
-      set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-linux-x86_64")
+      set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-linux-${UBUNTU_VERSION}")
 
       set(CPACK_GENERATOR "DEB")
       set(CPACK_DEBIAN_PACKAGE_DEPENDS
-          "obs-studio (>= 27.0.0), libqt5core5a (>= 5.9.0~beta), libqt5gui5 (>= 5.3.0), libqt5widgets5 (>= 5.7.0)"
+          "obs (>= 1.5.0), libqt5core5a (>= 5.9.0~beta), libqt5gui5 (>= 5.3.0), libqt5widgets5 (>= 5.7.0)"
       )
 
       set(CPACK_OUTPUT_FILE_PREFIX ${CMAKE_SOURCE_DIR}/release)
diff --git a/plugins/obs-ndi/cmake/bundle/macos/installer-macos.pkgproj.in b/plugins/obs-ndi/cmake/bundle/macos/installer-macos.pkgproj.in
index 2a1f643..300f10a 100644
--- a/plugins/obs-ndi/cmake/bundle/macos/installer-macos.pkgproj.in
+++ b/plugins/obs-ndi/cmake/bundle/macos/installer-macos.pkgproj.in
@@ -91,7 +91,7 @@
 											<key>GID</key>
 											<integer>80</integer>
 											<key>PATH</key>
-											<string>obs-studio</string>
+											<string>obs-webrtc</string>
 											<key>PATH_TYPE</key>
 											<integer>2</integer>
 											<key>PERMISSIONS</key>
diff --git a/plugins/obs-ndi/lib/ndi/Processing.NDI.Lib.h b/plugins/obs-ndi/lib/ndi/Processing.NDI.Lib.h
index f83ee2b..773a83a 100644
--- a/plugins/obs-ndi/lib/ndi/Processing.NDI.Lib.h
+++ b/plugins/obs-ndi/lib/ndi/Processing.NDI.Lib.h
@@ -50,18 +50,18 @@
 #			ifdef _WIN64
 #				define NDILIB_LIBRARY_NAME  "Processing.NDI.Lib.x64.dll"
 #				define NDILIB_REDIST_FOLDER "NDI_RUNTIME_DIR_V5"
-#				define NDILIB_REDIST_URL    "http://new.tk/NDIRedistV5"
+#				define NDILIB_REDIST_URL    "https://github.com/obs-ndi/obs-ndi/releases/tag/4.11.1"
 #			else // _WIN64
 #				define NDILIB_LIBRARY_NAME  "Processing.NDI.Lib.x86.dll"
 #				define NDILIB_REDIST_FOLDER "NDI_RUNTIME_DIR_V5"
-#				define NDILIB_REDIST_URL    "http://new.tk/NDIRedistV5"
+#				define NDILIB_REDIST_URL    "https://github.com/obs-ndi/obs-ndi/releases/tag/4.11.1"
 #			endif // _WIN64
 #		endif // PROCESSINGNDILIB_EXPORTS
 #	else // _WIN32
 #		ifdef __APPLE__
 #			define NDILIB_LIBRARY_NAME  "libndi.dylib"
 #			define NDILIB_REDIST_FOLDER "NDI_RUNTIME_DIR_V5"
-#			define NDILIB_REDIST_URL    "http://new.tk/NDIRedistV5Apple"
+#			define NDILIB_REDIST_URL    "https://github.com/obs-ndi/obs-ndi/releases/tag/4.11.1"
 #		else // __APPLE__
 #			define NDILIB_LIBRARY_NAME  "libndi.so.5"
 #			define NDILIB_REDIST_FOLDER "NDI_RUNTIME_DIR_V5"
