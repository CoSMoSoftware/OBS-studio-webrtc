# https://aka.ms/yaml

variables:
  - group: obs-pipeline
  - name: FTP_PATH_PREFIX
    value: $(webrtc_path_prefix)
  - name: FTP_LOGIN
    value: $(ftpLudoLogin)
  - name: FTP_PASSWORD
    value: $(ftpLudoPassword)
  - name: BUILD_TYPE
    value: Release
  - name: CMAKE_PREFIX_PATH
    value: /usr/local/opt/qt5/lib/cmake
  - name: LINUX_CEF_BUILD_VERSION
    value: 3770
  - name: CEF_VERSION
    value: 75.1.16+g16a67c4+chromium-75.0.3770.100
  - name: LIBWEBRTC_VERSION
    value: 88.0
  - name: OBS_VERSION
    value: 26.1.2-m88
  - name: TWITCH-CLIENTID
    value: $(twitch_clientid)
  - name: TWITCH-HASH
    value: $(twitch_hash)
  - name: RESTREAM-CLIENTID
    value: $(restream_clientid)
  - name: RESTREAM-HASH
    value: $(restream_hash)
# for Windows code signing
  # - name: WINDOWS_SIGNING_VAULT_URL_
  #   value: $(windows_signing_vault_url)
  # - name: WINDOWS_SIGNING_CLIENT_ID_
  #   value: $(windows_signing_client_id)
  # - name: WINDOWS_SIGNING_CLIENT_SECRET_
  #   value: $(windows_signing_client_secret)
  # - name: WINDOWS_SIGNING_CERTIFICATE_NAME_
  #   value: $(windows_signing_certificate_name)
# for Mac code signing
  - name: CODESIGN_IDENT
    value: $(ludo_apple_developer_identity)
  - name: CODESIGN_IDENT_USER
    value: $(ludo_apple_account_id)
  - name: CODESIGN_IDENT_PASS
    value: $(ludo_apple_developer_password)
# for script CI/full-build-macos.sh
  - name: MIN_MACOS_VERSION
    value: 10.13
  - name: MACOS_CEF_BUILD_VERSION
    value: 4183
  - name: MACOS_CEF_VERSION
    value: 85.3.13+gcd6cbe0+chromium-85.0.4183.121
  - name: MACOS_DEPS_VERSION
    value: '2020-12-22'
  - name: VLC_VERSION
    value: '3.0.8'
  - name: SPARKLE_VERSION
    value: '1.23.0'
  - name: QT_VERSION
    value: '5.15.2'

parameters:
  - name: vendors
    type: object
    default:
    - Millicast
#    - PacPost
#    - RemoteFilming

jobs:
- job: 'Build_macOS'
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: Certificates.p12
      certPwd: $(certificatesLudoPassword)
  - script: git submodule update --init --recursive
    displayName: 'Checkout Submodules'
  - ${{ each vendor in parameters.vendors }}:
    - script: TERM="" ./CI/full-build-macos.sh -b -p -n -v ${{ vendor }}
      displayName: '${{ vendor }} Install dependencies and build'
      env:
        MIN_MACOS_VERSION: $(MIN_MACOS_VERSION)
        MACOS_CEF_BUILD_VERSION: $(MACOS_CEF_BUILD_VERSION)
        MACOS_DEPS_VERSION: $(MACOS_DEPS_VERSION)
        QT_VERSION: $(QT_VERSION)
        CI_BUILD_TYPE: $(BUILD_TYPE)
        FTP_PATH_PREFIX: $(webrtc_path_prefix)
        FTP_LOGIN: $(ftpLudoLogin)
        FTP_PASSWORD: $(ftpLudoPassword)
        CODESIGN_IDENT: $(ludo_apple_developer_identity)
        CODESIGN_IDENT_USER: $(ludo_apple_account_id)
        CODESIGN_IDENT_PASS: $(ludo_apple_developer_password)
    - bash: |
        mkdir -p ./nightly_${{ vendor }}
        find ./build_${{ vendor }} -name \*.dmg -exec cp -PR \{\} ./nightly_${{ vendor }}/ \;
      displayName: '${{ vendor }} Copy disk image'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './nightly_${{ vendor }}'
        artifactName: macbuild_${{ vendor }}


- job: 'Build_Windows64'
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'Azure subscription 1 (6018dd3e-acb4-41f0-b255-d461c612cc07)'
      KeyVaultName: 'vault-for-win-signing'
      SecretsFilter: '*'
      RunAsPreJob: false
  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'install --global azuresigntool'
    displayName: Install AzureSignTool
  - script: git submodule update --init --recursive
    displayName: 'Checkout Submodules'
  - script: ./CI/install-qt-win.cmd
    displayName: 'Install QT'
    env:
      FTP_PATH_PREFIX: $(webrtc_path_prefix)
      FTP_LOGIN: $(ftpLudoLogin)
      FTP_PASSWORD: $(ftpLudoPassword)
  - script: ./CI/install-dependencies-win.cmd
    displayName: 'Download / Setup Dependencies'
    env:
      FTP_PATH_PREFIX: $(webrtc_path_prefix)
      FTP_LOGIN: $(ftpLudoLogin)
      FTP_PASSWORD: $(ftpLudoPassword)
  - ${{ each vendor in parameters.vendors }}:
    - script: ./CI/install-script-win.cmd ${{ vendor }}
      displayName: '${{ vendor }} Run CMake'
    - task: MSBuild@1
      displayName: '${{ vendor }} Build 64-bit'
      inputs:
        msbuildArguments: '/m /p:Configuration=$(BUILD_TYPE)'
        solution: .\build64_${{ vendor }}\${{ vendor }}.sln
    - script: ./CI/before-deploy-win.cmd ${{ vendor }}
      displayName: '${{ vendor }} Before deploy'
    # Download signing certificate
    - task: DownloadSecureFile@1
      name: windows_signing_certificate_file
      inputs:
        secureFile: signing_certificate_windows.pfx
    - task: CmdLine@2
      inputs:
        # script: |
          # set
          # SignTool sign /f $(windows_signing_certificate_file.secureFilePath) /p $(WINDOWS_SIGNING_CERTIFICATE_SECRET) ./build_${{ vendor }}/obs-webrtc-x64-26.1.2-m88.msi
        script: AzureSignTool sign -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "AppWindowsSigning" -td sha256 -v ./build_${{ vendor }}/obs-webrtc-x64-26.1.2-m88.msi
        # script: AzureSignTool sign -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvc "comodo-code-signing" -td sha256 -v ./build_${{ vendor }}/obs-webrtc-x64-26.1.2-m88.msi
        # script: AzureSignTool sign -kvu $(WINDOWS_SIGNING_VAULT_URL) -kvi $(WINDOWS_SIGNING_CLIENT_ID) -kvs $(WINDOWS_SIGNING_CLIENT_SECRET) -kvc $(WINDOWS_SIGNING_CERTIFICATE_NAME) -tr "http://timestamp.digicert.com" -td sha256 -v ./build_${{ vendor }}/obs-webrtc-x64-26.1.2-m88.msi
      displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
      env:
        WINDOWS_SIGNING_CERTIFICATE_SECRET: $(windows_signing_certificate_secret)
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './build_${{ vendor }}'
        artifactName: winbuild_${{ vendor }}

- job: 'Build_Linux'
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      git submodule update --init --recursive
      ./CI/install-dependencies-linux.sh
    displayName: 'checkout and dependencies'
    env:
      FTP_PATH_PREFIX: $(webrtc_path_prefix)
      FTP_LOGIN: $(ftpLudoLogin)
      FTP_PASSWORD: $(ftpLudoPassword)
  - ${{ each vendor in parameters.vendors }}:
    - bash: |
        set -e
        git stash
        mkdir build_${{ vendor }}
        export CC=clang
        export CXX=clang++
        ./CI/before-script-linux.sh ${{ vendor }}
        cd build_${{ vendor }}
        make -j4
        cd ..
        mkdir package_${{ vendor }}
        cd build_${{ vendor }}
        cpack -G DEB
        mv *.deb ../package_${{ vendor }}
        cd ..
      displayName: '${{ vendor }} cmake, build, package'
      env:
        CI_BUILD_TYPE: $(BUILD_TYPE)
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './package_${{ vendor }}'
        artifactName: 'debbuild_${{ vendor }}'
