# https://aka.ms/yaml

variables:
  - group: obs-pipeline
# new variables OBS 28
  - name: CEF_BUILD_VERSION_MAC
    value: '5060'
  - name: CEF_HASH_MAC_X86_64
    value: '88b950aa0bfc001061c35e7f1f3fefba856a6afb35e38b2b7b42ddd8dd239182'
  - name: CEF_HASH_MAC_ARM64
    value: '98679b92eea6ea9959ac5aa54f46ca60681d8a86c768c35f496dbdd409bf0642'
  - name: CEF_BUILD_VERSION_LINUX
    value: '5060'
  - name: CEF_BUILD_VERSION_WIN
    value: '5060'
  - name: QT_VERSION_MAC
    value: '6.3.1'
  - name: QT_HASH_MAC_X86_64
    value: 'a83f72a11023b03b6cb2dc365f0a66ad9df31163bbb4fe2df32d601856a9fad3'
  - name: QT_HASH_MAC_ARM64
    value: '2f30af90c049670a5660656adbb440668aa1b0567f75a5f29e1def9108928403'
  - name: QT_HASH_MAC_UNIVERSAL
    value: '252e6684f43ab9c6f262c73af739e2296ce391b998da2c4ee04c254aaa07db18'
  - name: QT_VERSION_WIN
    value: '6.3.1'
  - name: DEPS_VERSION_MAC
    value: '2022-08-02'
  - name: DEPS_HASH_MAC_X86_64
    value: '7637e52305e6fc53014b5aabd583f1a4490b1d97450420e977cae9a336a29525'
  - name: DEPS_HASH_MAC_ARM64
    value: '755e0fa69b17a3ae444e1befa9d91d77e3cafe628fbd1c6333686091826595cd'
  - name: DEPS_VERSION_WIN
    value: '2022-08-02'
  - name: VLC_VERSION_MAC
    value: '3.0.8'
  - name: VLC_HASH_MAC
    value: 'e0149ef4a20a19b9ecd87309c2d27787ee3f47dfd47c6639644bc1f6fd95bdf6'
  - name: VLC_VERSION_WIN
    value: '3.0.0-git'
# older variables
  - name: FTP_PATH_PREFIX
    value: $(webrtc_path_prefix)
  - name: FTP_LOGIN
    value: $(ftpLudoLogin)
  - name: FTP_PASSWORD
    value: $(ftpLudoPassword)
  - name: BUILD_TYPE
    value: RelWithDebInfo
  - name: LIBWEBRTC_VERSION
    value: 108.0
  - name: OBS_VERSION
    value: 1.5.0-28.1.2-m108
# for Mac code signing
  - name: CODESIGN_TEAM_ID
    value: $(apple_team_id)
  - name: CODESIGN_IDENT
    value: $(ludo_apple_developer_identity)
  - name: WOWZA_CODESIGN_IDENT
    value: $(wowza_apple_developer_identity)
  - name: CODESIGN_IDENT_USER
    value: $(ludo_apple_account_id)
  - name: CODESIGN_IDENT_PASS
    value: $(ludo_apple_developer_password)
  - name: NOTARIZE_APP_SPECIFIC_PASSWORD
    value: $(ludo_apple_app_specific_password)

parameters:
  - name: architectures
    type: object
    default:
    - x86_64
#    - arm64
  - name: vendors
    type: object
    default:
    - Millicast
#    - PacPost
#    - RemoteFilming
#    - RemoteFilming-A
#    - RemoteFilming-B
#    - RemoteFilming-C
#    - RemoteFilming-D
#    - Wowza


jobs:
- job: 'Build_macOS'
  timeoutInMinutes: 800
  cancelTimeoutInMinutes: 800
  pool:
    vmImage: 'macOS-12'
  steps:
  - script: git submodule update --init --recursive
    displayName: 'Checkout Submodules'
  - task: DownloadGitHubRelease@0
    inputs:
      connection: 'github.com_ludocosmo'
      userRepository: 'CoSMoSoftware/libwebrtc-cmake'
      defaultVersionType: 'specificTag'
      version: 'm108'
      itemPattern: 'libWebRTC-${{ variables.LIBWEBRTC_VERSION }}-?(x|arm)64-Release-H264-OpenSSL_1_1_1?.dmg'
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - ${{ each arch in parameters.architectures }}:
    - script: TERM="" ./CI/macos/01_install_dependencies.sh --architecture ${{ arch }}
      displayName: '${{ arch }} Install dependencies'
      env:
        CURRENT_ARCH: ${{ arch }}
        MACOSX_DEPLOYMENT_TARGET_X86_64: '10.15'
        MACOSX_DEPLOYMENT_TARGET_ARM64: '11.0'
        SPARKLE_VERSION: '1.26.0'
        SPARKLE_HASH: '8312cbf7528297a49f1b97692c33cb8d33254c396dc51be394e9484e4b6833a0'
  - ${{ each vendor in parameters.vendors }}:
    - ${{ if ne( vendor, 'Wowza') }}:
      - task: InstallAppleCertificate@2
        displayName: 'üîê Install CoSMo Signing Certificate'
        inputs:
          certSecureFile: Certificates.p12
          certPwd: $(certificatesLudoPassword)
    - ${{ if eq( vendor, 'Wowza') }}:
      - task: InstallAppleCertificate@2
        displayName: 'üîê Install Wowza Signing Certificate'
        inputs:
          certSecureFile: wowza.p12
          certPwd: $(wowza_mac_certificate_password)
    - script: git stash
      displayName: git stash
    - script: rm -rf plugins/obs-ndi
      displayName: rm plugins/obs-ndi
    - script: rm -rf plugins/obs-browser
      displayName: rm plugins/obs-browser
    - script: git submodule update --init --recursive
      displayName: 'Checkout Submodules'
    - ${{ each arch in parameters.architectures }}:
      - ${{ if eq( vendor, 'Wowza') }}:
        - bash: |
            cp vendor_skins/Wowza/cmake/Modules/VersionConfig.cmake cmake/Modules/
          displayName: Wowza copy file cmake/Modules/VersionConfig.cmake
      # Generate OBS without obs-ndi plugin
      - script: TERM="" ./CI/macos/02_build_obs.sh --codesign --build-dir build_${{ vendor }}_${{ arch }} --architecture ${{ arch }} --vendor ${{ vendor }}
        displayName: '${{ vendor }} ${{ arch }} Build OBS'
        env:
          CURRENT_ARCH: ${{ arch }}
          CODESIGN_TEAM_ID: $(apple_team_id)
          CODESIGN_IDENT: $(ludo_apple_developer_identity)
          WOWZA_CODESIGN_IDENT: $(wowza_apple_developer_identity)
          CODESIGN_IDENT_USER: $(ludo_apple_account_id)
          NOTARIZE_APP_SPECIFIC_PASSWORD: $(ludo_apple_app_specific_password)
      - script: TERM="" ./CI/macos/03_package_obs.sh --codesign --notarize --build-dir build_${{ vendor }}_${{ arch }} --architecture ${{ arch }} --vendor ${{ vendor }}
        displayName: '${{ vendor }} ${{ arch }} Package, sign, notarize'
        env:
          CURRENT_ARCH: ${{ arch }}
          CODESIGN_TEAM_ID: $(apple_team_id)
          CODESIGN_IDENT: $(ludo_apple_developer_identity)
          WOWZA_CODESIGN_IDENT: $(wowza_apple_developer_identity)
          CODESIGN_IDENT_USER: $(ludo_apple_account_id)
          NOTARIZE_APP_SPECIFIC_PASSWORD: $(ludo_apple_app_specific_password)
      # Generate OBS with obs-ndi plugin
      - script: TERM="" ./CI/macos/02_build_obs.sh --codesign --build-dir build_${{ vendor }}_${{ arch }} --architecture ${{ arch }} --vendor ${{ vendor }} --ndi
        displayName: '${{ vendor }} ${{ arch }} Build OBS + plugin obs-ndi'
        env:
          CURRENT_ARCH: ${{ arch }}
          CODESIGN_TEAM_ID: $(apple_team_id)
          CODESIGN_IDENT: $(ludo_apple_developer_identity)
          WOWZA_CODESIGN_IDENT: $(wowza_apple_developer_identity)
          CODESIGN_IDENT_USER: $(ludo_apple_account_id)
          NOTARIZE_APP_SPECIFIC_PASSWORD: $(ludo_apple_app_specific_password)
      - script: TERM="" ./CI/macos/03_package_obs.sh --codesign --notarize --build-dir build_${{ vendor }}_${{ arch }} --architecture ${{ arch }} --vendor ${{ vendor }} --ndi
        displayName: '${{ vendor }} ${{ arch }} Package, sign, notarize'
        env:
          CURRENT_ARCH: ${{ arch }}
          CODESIGN_TEAM_ID: $(apple_team_id)
          CODESIGN_IDENT: $(ludo_apple_developer_identity)
          WOWZA_CODESIGN_IDENT: $(wowza_apple_developer_identity)
          CODESIGN_IDENT_USER: $(ludo_apple_account_id)
          NOTARIZE_APP_SPECIFIC_PASSWORD: $(ludo_apple_app_specific_password)
      - ${{ if eq( vendor, 'Millicast') }}:
        - bash: |
            ls -l build_${{ vendor }}_${{ arch }}
          displayName: ls
        - bash: |
            ARTIFACT_NAME=$(basename $(/usr/bin/find build_${{ vendor }}_${{ arch }} -type f -name "obs-webrtc-${OBS_VERSION}-macos-${{ arch }}.dmg" -depth 1 | head -1))
            mkdir -p ./nightly_${{ vendor }}_${{ arch }}
            mv build_${{ vendor }}_${{ arch }}/${ARTIFACT_NAME} ./nightly_${{ vendor }}_${{ arch }}
            ARTIFACT_NAME=$(basename $(/usr/bin/find build_${{ vendor }}_${{ arch }} -type f -name "obs-webrtc-ndi-${OBS_VERSION}-macos-${{ arch }}.dmg" -depth 1 | head -1))
            mkdir -p ./nightly_${{ vendor }}_${{ arch }}
            mv build_${{ vendor }}_${{ arch }}/${ARTIFACT_NAME} ./nightly_${{ vendor }}_${{ arch }}
          displayName: '${{ vendor }} ${{ arch }} Copy disk image'
      - ${{ if eq( vendor, 'RemoteFilming') }}:
        - bash: |
            ARTIFACT_NAME=$(basename $(/usr/bin/find build_${{ vendor }}_${{ arch }} -type f -name "Remote-Filming-*.dmg" -depth 1 | head -1))
            mkdir -p ./nightly_${{ vendor }}_${{ arch }}
            mv build_${{ vendor }}_${{ arch }}/${ARTIFACT_NAME} ./nightly_${{ vendor }}_${{ arch }}
          displayName: '${{ vendor }} ${{ arch }} Copy disk image'
      - ${{ if eq( vendor, 'RemoteFilming-A') }}:
        - bash: |
            ARTIFACT_NAME=$(basename $(/usr/bin/find build_${{ vendor }}_${{ arch }} -type f -name "A-CAM-*.dmg" -depth 1 | head -1))
            mkdir -p ./nightly_${{ vendor }}_${{ arch }}
            mv build_${{ vendor }}_${{ arch }}/${ARTIFACT_NAME} ./nightly_${{ vendor }}_${{ arch }}
          displayName: '${{ vendor }} ${{ arch }} Copy disk image'
      - ${{ if eq( vendor, 'RemoteFilming-B') }}:
        - bash: |
            ARTIFACT_NAME=$(basename $(/usr/bin/find build_${{ vendor }}_${{ arch }} -type f -name "B-CAM-*.dmg" -depth 1 | head -1))
            mkdir -p ./nightly_${{ vendor }}_${{ arch }}
            mv build_${{ vendor }}_${{ arch }}/${ARTIFACT_NAME} ./nightly_${{ vendor }}_${{ arch }}
          displayName: '${{ vendor }} ${{ arch }} Copy disk image'
      - ${{ if eq( vendor, 'RemoteFilming-C') }}:
        - bash: |
            ARTIFACT_NAME=$(basename $(/usr/bin/find build_${{ vendor }}_${{ arch }} -type f -name "C-CAM-*.dmg" -depth 1 | head -1))
            mkdir -p ./nightly_${{ vendor }}_${{ arch }}
            mv build_${{ vendor }}_${{ arch }}/${ARTIFACT_NAME} ./nightly_${{ vendor }}_${{ arch }}
          displayName: '${{ vendor }} ${{ arch }} Copy disk image'
      - ${{ if eq( vendor, 'RemoteFilming-D') }}:
        - bash: |
            ARTIFACT_NAME=$(basename $(/usr/bin/find build_${{ vendor }}_${{ arch }} -type f -name "D-CAM-*.dmg" -depth 1 | head -1))
            mkdir -p ./nightly_${{ vendor }}_${{ arch }}
            mv build_${{ vendor }}_${{ arch }}/${ARTIFACT_NAME} ./nightly_${{ vendor }}_${{ arch }}
          displayName: '${{ vendor }} ${{ arch }} Copy disk image'
      - ${{ if eq( vendor, 'Wowza') }}:
        - bash: |
            ARTIFACT_NAME=$(basename $(/usr/bin/find build_${{ vendor }}_${{ arch }} -type f -name "Wowza-OBS-Real-Time-*-${{ arch }}.dmg" -depth 1 | head -1))
            mkdir -p ./nightly_${{ vendor }}_${{ arch }}
            mv build_${{ vendor }}_${{ arch }}/${ARTIFACT_NAME} ./nightly_${{ vendor }}_${{ arch }}
          displayName: '${{ vendor }} ${{ arch }} Copy disk image'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: './nightly_${{ vendor }}_${{ arch }}'
          artifactName: macbuild_${{ vendor }}_${{ arch }}

- job: 'Build_Windows64'
  timeoutInMinutes: 300
  cancelTimeoutInMinutes: 300
  pool:
    vmImage: 'windows-2022'
  steps:
  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'install --global azuresigntool'
    displayName: Install AzureSignTool
  - task: DownloadGitHubRelease@0
    inputs:
      connection: 'github.com_ludocosmo'
      userRepository: 'CoSMoSoftware/libwebrtc-cmake'
      defaultVersionType: 'specificTag'
      version: 'm108'
      itemPattern: 'libWebRTC-${{ variables.LIBWEBRTC_VERSION }}-x64-Mt-Release-*.exe'
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - script: git submodule update --init --recursive
    displayName: 'Checkout Submodules'
  - powershell: ./CI/windows/01_install_dependencies.ps1 -BuildArch x64
    displayName: 'Install dependencies'
    timeoutInMinutes: 200
  - ${{ each vendor in parameters.vendors }}:
    - script: git stash
      displayName: git stash
    - script: rmdir /S /Q plugins\\obs-ndi
      displayName: rmdir plugins/obs-ndi
    - script: rmdir /S /Q plugins\\obs-browser
      displayName: rmdir plugins/obs-browser
    - script: git submodule update --init --recursive
      displayName: 'Checkout Submodules'
    - ${{ if eq( vendor, 'Wowza') }}:
      - bash: |
          cp vendor_skins/Wowza/cmake/Modules/VersionConfig.cmake cmake/Modules/
        displayName: Wowza copy file cmake/Modules/VersionConfig.cmake
    # Generate OBS without obs-ndi plugin
    - powershell: ./CI/windows/02_build_obs.ps1 -BuildArch x64 -Vendor ${{ vendor }}
      displayName: '${{ vendor }} Build OBS'
      env:
        OBS_VERSION: ${OBS_VERSION}
        CMAKE_GENERATOR: 'Visual Studio 17 2022'
        CMAKE_SYSTEM_VERSION: '10.0.18363.657'
        VIRTUALCAM-GUID: 'A3FCE0F5-3493-419F-958A-ABA1250EC20B'
    # Generate OBS with obs-ndi plugin
    - powershell: ./CI/windows/02_build_obs.ps1 -BuildArch x64 -Vendor ${{ vendor }} -Ndi ON
      displayName: '${{ vendor }} Build OBS + plugin obs-ndi'
      env:
        OBS_VERSION: ${OBS_VERSION}
        CMAKE_GENERATOR: 'Visual Studio 17 2022'
        CMAKE_SYSTEM_VERSION: '10.0.18363.657'
        VIRTUALCAM-GUID: 'A3FCE0F5-3493-419F-958A-ABA1250EC20B'
    - ${{ if eq( vendor, 'Millicast') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build64_${{ vendor }}/UI/$(BUILD_TYPE)/obs64.exe
        displayName: 'Sign obs64.exe with global AzureSignTool'
    - ${{ if or( eq( vendor, 'RemoteFilming'), eq( vendor, 'RemoteFilming-A'), eq( vendor, 'RemoteFilming-B'), eq( vendor, 'RemoteFilming-C'), eq( vendor, 'RemoteFilming-D') ) }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build64_${{ vendor }}/UI/$(BUILD_TYPE)/obs64.exe
        displayName: 'Sign obs64.exe with global AzureSignTool'
    # - ${{ if eq( vendor, 'Wowza') }}:
    #   - task: CmdLine@2
    #     inputs:
    #       script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WOWZA_SIGNING_CLIENT_SECRET)" -kvc "$(WOWZA_SIGNING_CERTIFICATE_NAME)" -td sha256 -v ./build64_${{ vendor }}/UI/$(BUILD_TYPE)/obs64.exe
    #     displayName: 'Sign obs64.exe with global AzureSignTool'
    - script: ./CI/windows/before-deploy-win.cmd ${{ vendor }}
      displayName: '${{ vendor }} Before deploy'
      env:
        BUILD_TYPE: $(BUILD_TYPE)
    - ${{ if eq( vendor, 'Millicast') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build_${{ vendor }}/obs-webrtc-x64-$(OBS_VERSION).exe
        displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    - ${{ if eq( vendor, 'RemoteFilming') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build_${{ vendor }}/remote-filming-x64-$(OBS_VERSION).exe
        displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    - ${{ if eq( vendor, 'RemoteFilming-A') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build_${{ vendor }}/remote-filming-A-x64-$(OBS_VERSION).exe
        displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    - ${{ if eq( vendor, 'RemoteFilming-B') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build_${{ vendor }}/remote-filming-B-x64-$(OBS_VERSION).exe
        displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    - ${{ if eq( vendor, 'RemoteFilming-C') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build_${{ vendor }}/remote-filming-C-x64-$(OBS_VERSION).exe
        displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    - ${{ if eq( vendor, 'RemoteFilming-D') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build_${{ vendor }}/remote-filming-D-x64-$(OBS_VERSION).exe
        displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    # - ${{ if eq( vendor, 'Wowza') }}:
    #   - task: CmdLine@2
    #     inputs:
    #       script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WOWZA_SIGNING_CLIENT_SECRET)" -kvc "$(WOWZA_SIGNING_CERTIFICATE_NAME)" -td sha256 -v ./build_${{ vendor }}/wowza-obs-x64-$(OBS_VERSION).exe
    #     displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './build_${{ vendor }}'
        artifactName: winbuild_${{ vendor }}

- job: 'Build_Ubuntu_20_04'
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: DownloadGitHubRelease@0
    inputs:
      connection: 'github.com_ludocosmo'
      userRepository: 'CoSMoSoftware/libwebrtc-cmake'
      defaultVersionType: 'specificTag'
      version: 'm108'
      itemPattern: 'libWebRTC-${{ variables.LIBWEBRTC_VERSION }}-*64-Release-*.sh'
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - bash: |
      git submodule update --init --recursive
      ./CI/linux/01_install_dependencies.sh --disable-pipewire
    displayName: 'checkout and dependencies'
  - ${{ each vendor in parameters.vendors }}:
    - bash: |
        set -e
        git stash
        rm -rf plugins/obs-browser
        rm -rf plugins/obs-ndi
        git submodule update --init --recursive
      displayName: 'git stash'
    - ${{ if eq( vendor, 'Wowza') }}:
      - bash: cp vendor_skins/Wowza/cmake/Modules/VersionConfig.cmake cmake/Modules/
        displayName: copy Wowza VersionConfig.cmake
    - bash: |
        set -e
        export CC=clang
        export CXX=clang++
        export OBS_VERSION=${OBS_VERSION}-2004
        ./CI/linux/02_build_obs.sh --disable-pipewire --vendor ${{ vendor }}
        ./CI/linux/03_package_obs.sh --vendor ${{ vendor }}
        pushd plugins/obs-ndi
        mkdir BUILD
        cd BUILD
        cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLINUX_PORTABLE=OFF -Dobs-frontend-api_DIR=../../../build/UI/obs-frontend-api
        make -j4
        cpack
        cd ../release
        mv *.deb ../../../package_${{ vendor }}
        popd
      displayName: '${{ vendor }} cmake, build, package'
      env:
        CI_BUILD_TYPE: $(BUILD_TYPE)
        PACKAGE_DEPENDENCIES:
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './package_${{ vendor }}'
        artifactName: 'debbuild_2004_${{ vendor }}'

- job: 'Build_Ubuntu_22_04'
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - task: DownloadGitHubRelease@0
    inputs:
      connection: 'github.com_ludocosmo'
      userRepository: 'CoSMoSoftware/libwebrtc-cmake'
      defaultVersionType: 'specificTag'
      version: 'm108'
      itemPattern: 'libWebRTC-${{ variables.LIBWEBRTC_VERSION }}-*64-Release-*.sh'
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - bash: |
      git submodule update --init --recursive
      ./CI/linux/01_install_dependencies.sh --disable-pipewire
    displayName: 'checkout and dependencies'
  - ${{ each vendor in parameters.vendors }}:
    - bash: |
        set -e
        git stash
        rm -rf plugins/obs-browser
        rm -rf plugins/obs-ndi
        git submodule update --init --recursive
      displayName: 'git stash'
    - ${{ if eq( vendor, 'Wowza') }}:
      - bash: cp vendor_skins/Wowza/cmake/Modules/VersionConfig.cmake cmake/Modules/
        displayName: copy Wowza VersionConfig.cmake
    - bash: |
        export CC=clang
        export CXX=clang++
        export OBS_VERSION=${OBS_VERSION}-2204
        ./CI/linux/02_build_obs.sh --disable-pipewire --vendor ${{ vendor }}
        ./CI/linux/03_package_obs.sh --vendor ${{ vendor }}
        pushd plugins/obs-ndi
        mkdir BUILD
        cd BUILD
        cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLINUX_PORTABLE=OFF -Dobs-frontend-api_DIR=../../../build/UI/obs-frontend-api
        make -j4
        cpack
        cd ../release
        mv *.deb ../../../package_${{ vendor }}
        popd
      displayName: '${{ vendor }} cmake, build, package'
      env:
        CI_BUILD_TYPE: $(BUILD_TYPE)
        PACKAGE_DEPENDENCIES: "qt6-wayland"
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './package_${{ vendor }}'
        artifactName: 'debbuild_2204_${{ vendor }}'
