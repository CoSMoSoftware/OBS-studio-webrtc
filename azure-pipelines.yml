# https://aka.ms/yaml

variables:
  CMAKE_PREFIX_PATH: /usr/local/opt/qt5/lib/cmake
  CEF_BUILD_VERSION: 3770
  CEF_VERSION: 75.1.16+g16a67c4+chromium-75.0.3770.100
  LIBWEBRTC_VERSION: 84.0
  OBS_VERSION: 26.0
  TWITCH-CLIENTID: $(twitch_clientid)
  TWITCH-HASH: $(twitch_hash)
  RESTREAM-CLIENTID: $(restream_clientid)
  RESTREAM-HASH: $(restream_hash)
  # VENDOR_BUILD possible values (select one only):
  #   Millicast
  #   PacPost
  #   RemoteFilming
  VENDOR_BUILD: PacPost

parameters:
  - name: vendors
    type: object
    default:
    - Millicast
    - PacPost
    - RemoteFilming

jobs:
- job: 'Build_macOS'
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - script: git submodule update --init --recursive
    displayName: 'Checkout Submodules'
  - script: TERM="" ./CI/full-build-macos.sh
    displayName: 'Install dependencies and build'
  - script: TERM="" ./CI/full-build-macos.sh -s -d -b -p
    displayName: 'Before Deploy'
  - bash: |
      mkdir -p ./nightly
      find ./build -name \*.dmg -exec cp -PR \{\} ./nightly/ \;
    displayName: 'Copy disk image'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: './nightly'
      artifactName: macbuild

- job: 'Build_Windows64'
  pool:
    vmImage: 'windows-2019'
  steps:
  - script: git submodule update --init --recursive
    displayName: 'Checkout Submodules'
  - script: ./CI/install-qt-win.cmd
    displayName: 'Install QT'
  - script: ./CI/install-script-win.cmd
    displayName: 'Download / Setup Deps / Run CMake'
  - task: MSBuild@1
    displayName: 'Build 64-bit'
    inputs:
      msbuildArguments: '/m /p:Configuration=Release'
      solution: .\build64\obs-studio.sln
  - script: ./CI/before-deploy-win.cmd
    displayName: 'Before deploy'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: './build'
      artifactName: winbuild

- job: 'Build_Linux'
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - ${{ each vendor in parameters.vendors }}:
    - bash: |
        mkdir ${{ vendor }}
        cd ${{ vendor }}
        git submodule update --init --recursive
        ./CI/install-dependencies-linux.sh
        ./CI/before-script-linux.sh ${{ vendor }}
        set -e
        cd build
        make -j4
        cd ..
        mkdir package
        cd build
        cpack -G DEB
        mv *.deb ../package/
        cd ..
      displayName: 'Checkout, dependencies, cmake, build, package'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '${{ vendor }}/package'
        artifactName: 'debbuild'
