# https://aka.ms/yaml

variables:
  - group: obs-pipeline
  - name: FTP_PATH_PREFIX
    value: $(webrtc_path_prefix)
  - name: FTP_LOGIN
    value: $(ftpLudoLogin)
  - name: FTP_PASSWORD
    value: $(ftpLudoPassword)
  - name: CODESIGN_IDENT
    value: $(ludo_apple_developer_identity)
  - name: CODESIGN_IDENT_USER
    value: $(ludo_apple_account_id)
  - name: CODESIGN_IDENT_PASS
    value: $(ludo_apple_developer_password)
  - name: CMAKE_PREFIX_PATH
    value: /usr/local/opt/qt5/lib/cmake
  - name: CEF_BUILD_VERSION
    value: 3770
  - name: CEF_VERSION
    value: 75.1.16+g16a67c4+chromium-75.0.3770.100
  - name: LIBWEBRTC_VERSION
    value: 84.0
  - name: OBS_VERSION
    value: 26.0
  - name: TWITCH-CLIENTID
    value: $(twitch_clientid)
  - name: TWITCH-HASH
    value: $(twitch_hash)
  - name: RESTREAM-CLIENTID
    value: $(restream_clientid)
  - name: RESTREAM-HASH
    value: $(restream_hash)
# for script CI/full-build-macos.sh
  - name: MACOS_DEPS_VERSION
    value: '2020-08-30'
  - name: VLC_VERSION
    value: '3.0.8'
  - name: SPARKLE_VERSION
    value: '1.23.0'
  - name: QT_VERSION
    value: '5.14.1'

parameters:
  - name: vendors
    type: object
    default:
    - Millicast
    - PacPost
#    - RemoteFilming

jobs:
- job: 'Build_macOS'
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: Certificates.p12
      certPwd: $(certificatesLudoPassword)
  - script: git submodule update --init --recursive
    displayName: 'Checkout Submodules'
  - ${{ each vendor in parameters.vendors }}:
    - script: TERM="" ./CI/full-build-macos.sh -v ${{ vendor }}
      displayName: '${{ vendor }} Install dependencies and build'
    - bash: TERM="" ./CI/full-build-macos.sh -s -d -b -p -n -v ${{ vendor }}
      displayName: '${{ vendor }} Before Deploy'
    - bash: |
        mkdir -p ./nightly_${{ vendor }}
        find ./build_${{ vendor }} -name \*.dmg -exec cp -PR \{\} ./nightly_${{ vendor }}/ \;
      displayName: '${{ vendor }} Copy disk image'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './nightly_${{ vendor }}'
        artifactName: macbuild_${{ vendor }}

- job: 'Build_Windows64'
  pool:
    vmImage: 'windows-2019'
  steps:
  - script: git submodule update --init --recursive
    displayName: 'Checkout Submodules'
  - script: ./CI/install-qt-win.cmd
    displayName: 'Install QT'
  - script: ./CI/install-dependencies-win.cmd
    displayName: 'Download / Setup Dependencies'
    env:
      FTP_PATH_PREFIX: $(webrtc_path_prefix)
      FTP_LOGIN: $(ftpLudoLogin)
      FTP_PASSWORD: $(ftpLudoPassword)
  - ${{ each vendor in parameters.vendors }}:
    - script: ./CI/install-script-win.cmd ${{ vendor }}
      displayName: '${{ vendor }} Run CMake'
    - task: MSBuild@1
      displayName: '${{ vendor }} Build 64-bit'
      inputs:
        msbuildArguments: '/m /p:Configuration=Release'
        solution: .\build64_${{ vendor }}\${{ vendor }}.sln
    - script: ./CI/before-deploy-win.cmd ${{ vendor }}
      displayName: '${{ vendor }} Before deploy'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './build_${{ vendor }}'
        artifactName: winbuild_${{ vendor }}

- job: 'Build_Linux'
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - bash: |
      git submodule update --init --recursive
      ./CI/install-dependencies-linux.sh
    displayName: 'checkout and dependencies'
    env:
      FTP_PATH_PREFIX: $(webrtc_path_prefix)
      FTP_LOGIN: $(ftpLudoLogin)
      FTP_PASSWORD: $(ftpLudoPassword)
  - ${{ each vendor in parameters.vendors }}:
    - bash: |
        set -e
        git stash
        mkdir build_${{ vendor }}
        ./CI/before-script-linux.sh ${{ vendor }}
        cd build_${{ vendor }}
        make -j4
        cd ..
        mkdir package_${{ vendor }}
        cd build_${{ vendor }}
        cpack -G DEB
        mv *.deb ../package_${{ vendor }}
        cd ..
      displayName: '${{ vendor }} cmake, build, package'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './package_${{ vendor }}'
        artifactName: 'debbuild_${{ vendor }}'
