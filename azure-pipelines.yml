# https://aka.ms/yaml

variables:
  - group: obs-pipeline
# new variables OBS 28
  - name: CEF_BUILD_VERSION_MAC
    value: '5060'
  - name: CEF_HASH_MAC_X86_64
    value: '88b950aa0bfc001061c35e7f1f3fefba856a6afb35e38b2b7b42ddd8dd239182'
  - name: CEF_HASH_MAC_ARM64
    value: '98679b92eea6ea9959ac5aa54f46ca60681d8a86c768c35f496dbdd409bf0642'
  - name: CEF_BUILD_VERSION_LINUX
    value: '5060'
  - name: CEF_BUILD_VERSION_WIN
    value: '5060'
  - name: QT_VERSION_MAC
    value: '6.3.1'
  - name: QT_HASH_MAC_X86_64
    value: 'a83f72a11023b03b6cb2dc365f0a66ad9df31163bbb4fe2df32d601856a9fad3'
  - name: QT_HASH_MAC_ARM64
    value: '2f30af90c049670a5660656adbb440668aa1b0567f75a5f29e1def9108928403'
  - name: QT_HASH_MAC_UNIVERSAL
    value: '252e6684f43ab9c6f262c73af739e2296ce391b998da2c4ee04c254aaa07db18'
  - name: QT_VERSION_WIN
    value: '6.3.1'
  - name: DEPS_VERSION_MAC
    value: '2022-08-02'
  - name: DEPS_HASH_MAC_X86_64
    value: '7637e52305e6fc53014b5aabd583f1a4490b1d97450420e977cae9a336a29525'
  - name: DEPS_HASH_MAC_ARM64
    value: '755e0fa69b17a3ae444e1befa9d91d77e3cafe628fbd1c6333686091826595cd'
  - name: DEPS_VERSION_WIN
    value: '2022-08-02'
  - name: VLC_VERSION_MAC
    value: '3.0.8'
  - name: VLC_HASH_MAC
    value: 'e0149ef4a20a19b9ecd87309c2d27787ee3f47dfd47c6639644bc1f6fd95bdf6'
  - name: VLC_VERSION_WIN
    value: '3.0.0-git'
# older variables
  - name: FTP_PATH_PREFIX
    value: $(webrtc_path_prefix)
  - name: FTP_LOGIN
    value: $(ftpLudoLogin)
  - name: FTP_PASSWORD
    value: $(ftpLudoPassword)
  - name: BUILD_TYPE
    value: RelWithDebInfo
  - name: CMAKE_PREFIX_PATH
    value: /usr/local/opt/qt5/lib/cmake
  - name: LINUX_CEF_BUILD_VERSION
    value: 4638
  - name: CEF_VERSION
    value: 4638
  - name: LIBWEBRTC_VERSION
    value: 104.0
  - name: OBS_VERSION
    value: 1.4.0-28.0.1-m104
# for Mac code signing
  - name: CODESIGN_IDENT
    value: $(ludo_apple_developer_identity)
  - name: CODESIGN_IDENT_USER
    value: $(ludo_apple_account_id)
  - name: CODESIGN_IDENT_PASS
    value: $(ludo_apple_developer_password)
  - name: NOTARIZE_APP_SPECIFIC_PASSWORD
    value: $(ludo_apple_app_specific_password)
# for script CI/full-build-macos.sh
  - name: MIN_MACOS_VERSION
    value: 10.13
  - name: MACOS_CEF_BUILD_VERSION
    value: 4638
  - name: MACOS_CEF_VERSION
    value: 85.3.13+gcd6cbe0+chromium-85.0.4183.121
  - name: MACOS_DEPS_VERSION
    value: '2022-02-13'
  - name: VLC_VERSION
    value: '3.0.8'
  - name: SPARKLE_VERSION
    value: '1.23.0'
  - name: QT_VERSION
    value: '5.15.2'

parameters:
  - name: vendors
    type: object
    default:
    - Millicast
#    - PacPost
#    - RemoteFilming
#    - RemoteFilming-A
#    - RemoteFilming-B
#    - RemoteFilming-C
#    - RemoteFilming-D
#    - Wowza

jobs:
- job: 'Build_macOS'
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - script: git submodule update --init --recursive
    displayName: 'Checkout Submodules'
  - task: DownloadGitHubRelease@0
    inputs:
      connection: 'github.com_ludocosmo'
      userRepository: 'CoSMoSoftware/libwebrtc-cmake'
      defaultVersionType: 'specificTag'
      version: 'm104rel'
      itemPattern: 'libWebRTC-${{ variables.LIBWEBRTC_VERSION }}-*64-Debug-*.dmg'
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - ${{ each vendor in parameters.vendors }}:
    - ${{ if ne( vendor, 'Wowza') }}:
      - task: InstallAppleCertificate@2
        displayName: 'üîê Install CoSMo Signing Certificate'
        inputs:
          certSecureFile: Certificates.p12
          certPwd: $(certificatesLudoPassword)
    - ${{ if eq( vendor, 'Wowza') }}:
      - task: InstallAppleCertificate@2
        displayName: 'üîê Install Wowza Signing Certificate'
        inputs:
          certSecureFile: wowza.p12
          certPwd: $(wowza_mac_certificate_password)
    - script: git stash
      displayName: git stash
    - script: rm -rf plugins/obs-ndi
      displayName: rm plugins/obs-ndi
    - script: git submodule update --init --recursive
      displayName: 'Checkout Submodules'
    - ${{ if or( eq( vendor, 'RemoteFilming'), eq( vendor, 'RemoteFilming-A'), eq( vendor, 'RemoteFilming-B'), eq( vendor, 'RemoteFilming-C'), eq( vendor, 'RemoteFilming-D') ) }}:
      - script: cp ./vendor_skins/${{ vendor }}/CI/full-build-macos.sh ./CI/full-build-macos.sh
        displayName: '${{ vendor }} copy full-build-macos.sh'
      - script: cp ./vendor_skins/${{ vendor }}/CMakeLists.txt ./CMakeLists.txt
        displayName: '${{ vendor }} copy CMakeLists.txt'
      - script: cp ./vendor_skins/${{ vendor }}/UI/ui-config.h.in ./UI/ui-config.h.in
        displayName: '${{ vendor }} copy ui-config.h.in'
    - ${{ if eq( vendor, 'Wowza') }}:
      - script: cp ./vendor_skins/Wowza/CI/full-build-macos.sh ./CI/full-build-macos.sh
        displayName: '${{ vendor }} copy full-build-macos.sh'
      - script: cp ./vendor_skins/Wowza/CMakeLists.txt ./CMakeLists.txt
        displayName: '${{ vendor }} copy CMakeLists.txt'
    - script: TERM="" ./CI/full-build-macos.sh -v ${{ vendor }}
      displayName: '${{ vendor }} Install dependencies and build'
      env:
        MIN_MACOS_VERSION: $(MIN_MACOS_VERSION)
        MACOS_CEF_BUILD_VERSION: $(MACOS_CEF_BUILD_VERSION)
        MACOS_DEPS_VERSION: $(MACOS_DEPS_VERSION)
        QT_VERSION: $(QT_VERSION)
        BUILD_CONFIG: $(BUILD_TYPE)
        FTP_PATH_PREFIX: $(webrtc_path_prefix)
        FTP_LOGIN: $(ftpLudoLogin)
        FTP_PASSWORD: $(ftpLudoPassword)
        CODESIGN_IDENT: $(ludo_apple_developer_identity)
        WOWZA_CODESIGN_IDENT: $(wowza_apple_developer_identity)
        CODESIGN_IDENT_USER: $(ludo_apple_account_id)
        CODESIGN_IDENT_PASS: $(ludo_apple_developer_password)
        NOTARIZE_APP_SPECIFIC_PASSWORD: $(ludo_apple_app_specific_password)
    - script: TERM="" ./CI/full-build-macos.sh -b -d -p -n -s -v ${{ vendor }}
      displayName: '${{ vendor }} Create bundle and notarize'
      env:
        MIN_MACOS_VERSION: $(MIN_MACOS_VERSION)
        MACOS_CEF_BUILD_VERSION: $(MACOS_CEF_BUILD_VERSION)
        MACOS_DEPS_VERSION: $(MACOS_DEPS_VERSION)
        QT_VERSION: $(QT_VERSION)
        BUILD_CONFIG: $(BUILD_TYPE)
        FTP_PATH_PREFIX: $(webrtc_path_prefix)
        FTP_LOGIN: $(ftpLudoLogin)
        FTP_PASSWORD: $(ftpLudoPassword)
        CODESIGN_IDENT: $(ludo_apple_developer_identity)
        WOWZA_CODESIGN_IDENT: $(wowza_apple_developer_identity)
        CODESIGN_IDENT_USER: $(ludo_apple_account_id)
        CODESIGN_IDENT_PASS: $(ludo_apple_developer_password)
        NOTARIZE_APP_SPECIFIC_PASSWORD: $(ludo_apple_app_specific_password)
    - bash: |
        mkdir -p ./nightly_${{ vendor }}
        find ./build_${{ vendor }} -name \*.dmg -exec cp -PR \{\} ./nightly_${{ vendor }}/ \;
      displayName: '${{ vendor }} Copy disk image'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './nightly_${{ vendor }}'
        artifactName: macbuild_${{ vendor }}


- job: 'Build_Windows64'
  pool:
    vmImage: 'windows-2022'
  steps:
  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'install --global azuresigntool'
    displayName: Install AzureSignTool
  - task: DownloadGitHubRelease@0
    inputs:
      connection: 'github.com_ludocosmo'
      userRepository: 'CoSMoSoftware/libwebrtc-cmake'
      defaultVersionType: 'specificTag'
      version: 'm104rel'
      itemPattern: 'libWebRTC-${{ variables.LIBWEBRTC_VERSION }}-*64-Release-*.exe'
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - script: git submodule update --init --recursive
    displayName: 'Checkout Submodules'
  - powershell: ./CI/windows/01_install_dependencies.ps1 -BuildArch x64
    displayName: 'Install dependencies'
    timeoutInMinutes: 300
  - ${{ each vendor in parameters.vendors }}:
    - script: git stash
      displayName: git stash
    - script: rmdir /S /Q plugins\\obs-ndi
      displayName: rmdir plugins/obs-ndi
    - script: git submodule update --init --recursive
      displayName: 'Checkout Submodules'
    - script: ./CI/install-script-win.cmd ${{ vendor }}
      displayName: '${{ vendor }} Run CMake'
      env:
        BUILD_TYPE: $(BUILD_TYPE)
    - task: MSBuild@1
      displayName: '${{ vendor }} Build 64-bit'
      inputs:
        msbuildArguments: '/m /p:Configuration=$(BUILD_TYPE)'
        solution: .\build64_${{ vendor }}\${{ vendor }}.sln
    - ${{ if eq( vendor, 'Millicast') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build64_${{ vendor }}/UI/$(BUILD_TYPE)/obs64.exe
        displayName: 'Sign obs64.exe with global AzureSignTool'
    - ${{ if or( eq( vendor, 'RemoteFilming'), eq( vendor, 'RemoteFilming-A'), eq( vendor, 'RemoteFilming-B'), eq( vendor, 'RemoteFilming-C'), eq( vendor, 'RemoteFilming-D') ) }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build64_${{ vendor }}/UI/$(BUILD_TYPE)/rfs64.exe
        displayName: 'Sign rfs64.exe with global AzureSignTool'
    # - ${{ if eq( vendor, 'Wowza') }}:
    #   - task: CmdLine@2
    #     inputs:
    #       script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WOWZA_SIGNING_CLIENT_SECRET)" -kvc "$(WOWZA_SIGNING_CERTIFICATE_NAME)" -td sha256 -v ./build64_${{ vendor }}/UI/$(BUILD_TYPE)/obs64.exe
    #     displayName: 'Sign obs64.exe with global AzureSignTool'
    - script: ./CI/before-deploy-win.cmd ${{ vendor }}
      displayName: '${{ vendor }} Before deploy'
      env:
        BUILD_TYPE: $(BUILD_TYPE)
    - ${{ if eq( vendor, 'Millicast') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build_${{ vendor }}/obs-webrtc-x64-$(OBS_VERSION).msi
        displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    - ${{ if eq( vendor, 'RemoteFilming') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build_${{ vendor }}/remote-filming-x64-$(OBS_VERSION).msi
        displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    - ${{ if eq( vendor, 'RemoteFilming-A') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build_${{ vendor }}/remote-filming-A-x64-$(OBS_VERSION).msi
        displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    - ${{ if eq( vendor, 'RemoteFilming-B') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build_${{ vendor }}/remote-filming-B-x64-$(OBS_VERSION).msi
        displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    - ${{ if eq( vendor, 'RemoteFilming-C') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build_${{ vendor }}/remote-filming-C-x64-$(OBS_VERSION).msi
        displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    - ${{ if eq( vendor, 'RemoteFilming-D') }}:
      - task: CmdLine@2
        inputs:
          script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WINDOWS_SIGNING_CLIENT_SECRET)" -kvc "$(WINDOWS_SIGNING_CERTIFICATE_NAME)" -tr "http://timestamp.comodoca.com" -td sha256 -v ./build_${{ vendor }}/remote-filming-D-x64-$(OBS_VERSION).msi
        displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    # - ${{ if eq( vendor, 'Wowza') }}:
    #   - task: CmdLine@2
    #     inputs:
    #       script: AzureSignTool sign -kvt "$(WINDOWS_SIGNING_TENANT_ID)" -kvu "$(WINDOWS_SIGNING_VAULT_URL)" -kvi "$(WINDOWS_SIGNING_CLIENT_ID)" -kvs "$(WOWZA_SIGNING_CLIENT_SECRET)" -kvc "$(WOWZA_SIGNING_CERTIFICATE_NAME)" -td sha256 -v ./build_${{ vendor }}/wowza-obs-x64-$(OBS_VERSION).msi
    #     displayName: 'Sign build_${{ vendor }} with global AzureSignTool'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './build_${{ vendor }}'
        artifactName: winbuild_${{ vendor }}

- job: 'Build_Ubuntu_20_04'
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: DownloadGitHubRelease@0
    inputs:
      connection: 'github.com_ludocosmo'
      userRepository: 'CoSMoSoftware/libwebrtc-cmake'
      defaultVersionType: 'specificTag'
      version: 'm104rel'
      itemPattern: 'libWebRTC-${{ variables.LIBWEBRTC_VERSION }}-*64-Debug-*.sh'
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - bash: |
      git submodule update --init --recursive
      ./CI/linux/01_install_dependencies.sh --disable-pipewire
    displayName: 'checkout and dependencies'
  - ${{ each vendor in parameters.vendors }}:
    - bash: |
        set -e
        git stash
        rm -rf plugins/obs-ndi
        git submodule update --init --recursive
      displayName: 'git stash'
    - ${{ if eq( vendor, 'Wowza') }}:
      - script: cp ./vendor_skins/${{ vendor }}/CMakeLists.txt ./CMakeLists.txt
        displayName: '${{ vendor }} copy CMakeLists.txt'
    - bash: |
        set -e
        export CC=clang
        export CXX=clang++
        export OBS_VERSION=${OBS_VERSION}-2004
        ./CI/linux/02_build_obs.sh --disable-pipewire --vendor ${{ vendor }}
        ./CI/linux/03_package_obs.sh --vendor ${{ vendor }}
      displayName: '${{ vendor }} cmake, build, package'
      env:
        CI_BUILD_TYPE: $(BUILD_TYPE)
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './package_${{ vendor }}'
        artifactName: 'debbuild_2004_${{ vendor }}'

- job: 'Build_Ubuntu_22_04'
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - task: DownloadGitHubRelease@0
    inputs:
      connection: 'github.com_ludocosmo'
      userRepository: 'CoSMoSoftware/libwebrtc-cmake'
      defaultVersionType: 'specificTag'
      version: 'm104rel'
      itemPattern: 'libWebRTC-${{ variables.LIBWEBRTC_VERSION }}-*64-Debug-*.sh'
      downloadPath: '$(System.DefaultWorkingDirectory)'
  - bash: |
      git submodule update --init --recursive
      ./CI/linux/01_install_dependencies.sh --disable-pipewire
    displayName: 'checkout and dependencies'
  - ${{ each vendor in parameters.vendors }}:
    - bash: |
        set -e
        git stash
        rm -rf plugins/obs-ndi
        git submodule update --init --recursive
      displayName: 'git stash'
    - ${{ if eq( vendor, 'Wowza') }}:
      - script: cp ./vendor_skins/${{ vendor }}/CMakeLists.txt ./CMakeLists.txt
        displayName: '${{ vendor }} copy CMakeLists.txt'
    - bash: |
        set -e
        export CC=clang
        export CXX=clang++
        export OBS_VERSION=${OBS_VERSION}-2204
        ./CI/linux/02_build_obs.sh --disable-pipewire --vendor ${{ vendor }}
        ./CI/linux/03_package_obs.sh --vendor ${{ vendor }}
      displayName: '${{ vendor }} cmake, build, package'
      env:
        CI_BUILD_TYPE: $(BUILD_TYPE)
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: './package_${{ vendor }}'
        artifactName: 'debbuild_2204_${{ vendor }}'
